#pragma once

#include <sys/time.h>

aspect DfatoolHostTiming {
	struct timeval starttime;
	struct timeval stoptime;
	uint32_t n_ranks = 0;
	uint32_t n_dpus = 0;

	benchmark_statements bench_op;
	unsigned int _data_on_dpus, _data_on_dpus_changed;

	double const M_to_Mi = 1.048576; /* 2^20 / 1e6 */

	/*
	 * Benchmark-specific
	 */

	advice call("% parse_params(...)"): after() {
		Params* p = *(tjp->arg<2>());
		n_ranks = p->n_ranks;
	}

	advice call("void startOperation(...)") : after() {
		bench_op = *(tjp->arg<0>());
		_data_on_dpus = data_on_dpus;
		_data_on_dpus_changed = data_on_dpus_changed;
		printf("[>>] DBMS | n_ranks=%u n_elements=%lu e_op=%s b_data_on_dpus=%d b_data_on_dpus_changed=%d\n", n_ranks, n_elements, statement_names[bench_op], _data_on_dpus, _data_on_dpus_changed);
	}
	advice call("void endOperation(...)") : after() {
		printf("[<<] DBMS | n_ranks=%u n_elements=%lu e_op=%s b_data_on_dpus=%d b_data_on_dpus_changed=%d\n", n_ranks, n_elements, statement_names[bench_op], _data_on_dpus, _data_on_dpus_changed);
	}

	/*
	 * SDK-specific
	 */

	advice call("% dpu_get_nr_dpus(...)") : after() {
		n_dpus = **(tjp->arg<1>());
	}

	advice call("% dpu_get_nr_ranks(...)") : after() {
		n_ranks = **(tjp->arg<1>());
	}

	advice call("% dpu_alloc_ranks(...)") : around() {
		gettimeofday(&starttime, NULL);
		tjp->proceed();
		gettimeofday(&stoptime, NULL);
		n_ranks = *(tjp->arg<0>());
		printf("[::] dpu_alloc_ranks @ %s:%d | n_ranks=%u | latency_us=%f\n",
			tjp->filename(),
			tjp->line(),
			n_ranks,
			(stoptime.tv_sec - starttime.tv_sec) * 1000000.0 + (stoptime.tv_usec - starttime.tv_usec)
		);
	}

	advice call("% dpu_load(...)") : around() {
		gettimeofday(&starttime, NULL);
		tjp->proceed();
		gettimeofday(&stoptime, NULL);
		printf("[::] dpu_load @ %s:%d | n_dpus=%u n_ranks=%u | latency_us=%f\n",
			tjp->filename(),
			tjp->line(),
			n_dpus, n_ranks,
			(stoptime.tv_sec - starttime.tv_sec) * 1000000.0 + (stoptime.tv_usec - starttime.tv_usec)
		);
	}

	advice call("% dpu_free(...)") : around() {
		gettimeofday(&starttime, NULL);
		tjp->proceed();
		gettimeofday(&stoptime, NULL);
		printf("[::] dpu_free @ %s:%d | n_dpus=%u n_ranks=%u | latency_us=%f\n",
			tjp->filename(),
			tjp->line(),
			n_dpus, n_ranks,
			(stoptime.tv_sec - starttime.tv_sec) * 1000000.0 + (stoptime.tv_usec - starttime.tv_usec)
		);
	}

	advice call("% dpu_launch(...)") : around() {
		gettimeofday(&starttime, NULL);
		tjp->proceed();
		gettimeofday(&stoptime, NULL);
		double latency_us = (stoptime.tv_sec - starttime.tv_sec) * 1000000.0 + (stoptime.tv_usec - starttime.tv_usec);
		printf("[::] dpu_launch @ %s:%d | n_dpus=%u n_ranks=%u e_kernel=%s | latency_us=%f\n",
			tjp->filename(),
			tjp->line(),
			n_dpus, n_ranks,
			kernel_names[input_arguments[0].kernel],
			latency_us
		);
	}

	advice call("% dpu_push_xfer(...)") : around() {
		size_t payload_size = *(tjp->arg<4>());
		gettimeofday(&starttime, NULL);
		tjp->proceed();
		gettimeofday(&stoptime, NULL);
		double time_us = (stoptime.tv_sec - starttime.tv_sec) * 1000000.0 + (stoptime.tv_usec - starttime.tv_usec);
		if (*(tjp->arg<1>()) == DPU_XFER_TO_DPU) {
			printf("[::] dpu_push_to_dpu @ %s:%d | n_dpus=%u n_ranks=%u total_payload_B=%lu dpu_payload_B=%lu | latency_us=%f throughput_MiBps=%f\n",
				tjp->filename(),
				tjp->line(),
				n_dpus, n_ranks,
				payload_size * n_dpus, payload_size,
				time_us,
				payload_size * n_dpus / (time_us * M_to_Mi)
			);
		} else if (*(tjp->arg<1>()) == DPU_XFER_FROM_DPU) {
			printf("[::] dpu_push_from_dpu @ %s:%d | n_dpus=%u n_ranks=%u total_payload_B=%lu dpu_payload_B=%lu | latency_us=%f throughput_MiBps=%f\n",
				tjp->filename(),
				tjp->line(),
				n_dpus, n_ranks,
				payload_size * n_dpus, payload_size,
				time_us,
				payload_size * n_dpus / (time_us * M_to_Mi)
			);
		}
	}
};
